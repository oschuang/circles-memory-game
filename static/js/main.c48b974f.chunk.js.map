{"version":3,"sources":["components/circles/Circle.js","components/circles/DisplayCircle.js","components/CirclesContainer.js","components/button/Button.js","components/ButtonsContainer.js","app/App.js","serviceWorker.js","index.js"],"names":["Circle","props","id","className","onClick","DisplayCircle","round","toUpperCase","replace","gameStarted","CirclesContainer","getCircleClass","circleColor","activeColor","userTurn","onCircleClick","color","Promise","resolve","reject","recordMove","then","verifyMove","Button","text","ButtonsContainer","resetGame","startGame","toggleStrict","strictMode","getStrictButtonClass","App","state","colors","cpuMoves","userMoves","sounds","red","Audio","green","yellow","blue","bind","addColor","playSequence","advanceRound","redoRound","toggleTurn","clearUserMoves","incrementRound","displayMessage","getRandomColor","playColorFX","animateColor","activateColor","deactivateColor","isFinalMove","isCorrect","this","setState","setTimeout","newColor","i","playColors","setInterval","length","clearInterval","currentColor","message","playSound","pause","currentTime","play","currentMoveIndex","Math","floor","random","Fragment","getCurrentRound","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c48b974f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Circle = function (props) {\r\n  return (\r\n    <div\r\n      id={props.id}\r\n      className={props.className}\r\n      onClick={props.onClick}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Circle;\r\n","import React from \"react\";\r\n\r\nconst DisplayCircle = function (props) {\r\n  function getClassName() {\r\n    let className = \"middle-circle middle-border\";\r\n    if (props.round.toUpperCase() === \"GAME OVER\") {\r\n      return className.replace(\" middle-border\", \"\");\r\n    }\r\n    return className;\r\n  }\r\n  return (\r\n    <div className={getClassName()}>\r\n      <p id=\"round-text\">{props.gameStarted ? props.round : \"\"}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayCircle;\r\n","import React from \"react\";\r\nimport Circle from \"./circles/Circle\";\r\nimport DisplayCircle from \"./circles/DisplayCircle\";\r\n\r\nconst CirclesContainer = function (props) {\r\n  function getCircleClass(circleColor) {\r\n    let className = \"color-circle\";\r\n    if (props.activeColor === circleColor) {\r\n      className += \" active-circle\"; //this class animates the button \"on\"\r\n    }\r\n    if (!props.userTurn) {\r\n      className += \" disabled\";\r\n    }\r\n    return className;\r\n  }\r\n\r\n  function onCircleClick(color) {\r\n    new Promise((resolve, reject) => {\r\n      props.recordMove(color);\r\n      resolve();\r\n    }).then(() => props.verifyMove(color));\r\n  }\r\n\r\n  return (\r\n    <div id=\"circles-wrapper\">\r\n      <Circle\r\n        id=\"red-circle\"\r\n        className={getCircleClass(\"red\")}\r\n        onClick={() => onCircleClick(\"red\")}\r\n      />\r\n      <Circle\r\n        id=\"green-circle\"\r\n        className={getCircleClass(\"green\")}\r\n        onClick={() => onCircleClick(\"green\")}\r\n      />\r\n      <Circle\r\n        id=\"yellow-circle\"\r\n        className={getCircleClass(\"yellow\")}\r\n        onClick={() => onCircleClick(\"yellow\")}\r\n      />\r\n      <Circle\r\n        id=\"blue-circle\"\r\n        className={getCircleClass(\"blue\")}\r\n        onClick={() => onCircleClick(\"blue\")}\r\n      />\r\n      <DisplayCircle gameStarted={props.gameStarted} round={props.round} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CirclesContainer;\r\n","import React from \"react\";\r\n\r\nconst Button = function (props) {\r\n  return (\r\n    <button onClick={props.onClick} className={props.className}>\r\n      {props.text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Button from \"./button/Button\";\r\n\r\nconst ButtonsContainer = function (props) {\r\n  function getStrictButtonClass() {\r\n    let className = \"\";\r\n    if (props.strictMode) {\r\n      className += \"strict-on\";\r\n    }\r\n    if (props.gameStarted) {\r\n      className += \" strict-disabled\";\r\n    }\r\n    return className;\r\n  }\r\n\r\n  return (\r\n    <div id=\"buttons-wrapper\">\r\n      <Button\r\n        text={props.gameStarted ? \"RESET\" : \"START\"}\r\n        onClick={props.gameStarted ? props.resetGame : props.startGame}\r\n        className={props.gameStarted && !props.userTurn ? \"disabled\" : \"\"}\r\n      />\r\n      <Button\r\n        text={\"STRICT\"}\r\n        onClick={props.toggleStrict}\r\n        className={getStrictButtonClass()}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonsContainer;\r\n","import React from \"react\";\n\nimport CirclesContainer from \"../components/CirclesContainer\";\nimport ButtonsContainer from \"../components/ButtonsContainer\";\n\nimport \"../scss/css/main.min.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: [\"red\", \"green\", \"yellow\", \"blue\"],\n      cpuMoves: [],\n      userMoves: [],\n      activeColor: \"\",\n      round: 1,\n      userTurn: false,\n      gameStarted: false,\n      strictMode: false,\n      sounds: {\n        red: new Audio(\"https://s3.amazonaws.com/freecodecamp/simonSound1.mp3\"),\n        green: new Audio(\n          \"https://s3.amazonaws.com/freecodecamp/simonSound2.mp3\"\n        ),\n        yellow: new Audio(\n          \"https://s3.amazonaws.com/freecodecamp/simonSound3.mp3\"\n        ),\n        blue: new Audio(\n          \"https://s3.amazonaws.com/freecodecamp/simonSound4.mp3\"\n        ),\n      },\n    };\n\n    this.startGame = this.startGame.bind(this);\n    this.recordMove = this.recordMove.bind(this);\n    this.verifyMove = this.verifyMove.bind(this);\n\n    this.addColor = this.addColor.bind(this);\n    this.playSequence = this.playSequence.bind(this);\n\n    this.advanceRound = this.advanceRound.bind(this);\n    this.redoRound = this.redoRound.bind(this);\n\n    this.toggleTurn = this.toggleTurn.bind(this);\n    this.clearUserMoves = this.clearUserMoves.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n    this.toggleStrict = this.toggleStrict.bind(this);\n\n    this.incrementRound = this.incrementRound.bind(this);\n    this.displayMessage = this.displayMessage.bind(this);\n    this.getRandomColor = this.getRandomColor.bind(this);\n\n    this.playColorFX = this.playColorFX.bind(this);\n    this.animateColor = this.animateColor.bind(this);\n    this.activateColor = this.activateColor.bind(this);\n    this.deactivateColor = this.deactivateColor.bind(this);\n\n    this.isFinalMove = this.isFinalMove.bind(this);\n    this.isCorrect = this.isCorrect.bind(this);\n  }\n\n  startGame() {\n    this.setState({\n      gameStarted: true,\n    });\n    this.addColor();\n    this.playSequence();\n  }\n\n  recordMove(color) {\n    this.setState({\n      userMoves: [...this.state.userMoves, color],\n    });\n    this.playColorFX(color);\n  }\n\n  verifyMove(color) {\n    /* Wrong move:\n      A) Strict mode: Restart game from beginning\n      B) Default mode: Disable user input and repeat the round\n    */\n    //Timeouts are used to make the game flow smoother by having delays before resetting/redoing/advancing\n    if (!this.isCorrect()) {\n      this.toggleTurn();\n      if (this.state.strictMode) {\n        this.displayMessage(\"GAME OVER\");\n        setTimeout(this.resetGame, 1000);\n        return;\n      }\n      this.displayMessage(\"oops\");\n      setTimeout(this.redoRound, 500);\n      return;\n    }\n    if (this.isFinalMove()) {\n      setTimeout(this.advanceRound, 500);\n    }\n  }\n\n  addColor() {\n    const newColor = this.getRandomColor();\n    this.setState({\n      cpuMoves: [...this.state.cpuMoves, newColor],\n    });\n  }\n\n  playSequence() {\n    let i = 0;\n    const playColors = setInterval(() => {\n      if (i === this.state.cpuMoves.length) {\n        clearInterval(playColors);\n        this.toggleTurn(); //Toggling user turn here bc sequence finished playing\n        return;\n      }\n      let currentColor = this.state.cpuMoves[i];\n      this.playColorFX(currentColor);\n      i++;\n    }, 500);\n  }\n\n  advanceRound() {\n    new Promise((resolve, reject) => {\n      this.toggleTurn();\n      this.clearUserMoves();\n      this.incrementRound();\n      this.addColor();\n      resolve();\n    }).then(() => {\n      this.playSequence();\n    });\n  }\n\n  redoRound() {\n    this.displayMessage(this.state.cpuMoves.length); //Resets display to round bc wrong answer displays \"oops\"\n    this.clearUserMoves();\n    this.playSequence();\n  }\n\n  toggleTurn() {\n    this.setState({\n      userTurn: !this.state.userTurn,\n    });\n  }\n\n  clearUserMoves() {\n    this.setState({\n      userMoves: [],\n    });\n  }\n\n  incrementRound() {\n    this.setState({\n      round: this.state.round + 1,\n    });\n  }\n  displayMessage(message) {\n    this.setState({\n      round: message,\n    });\n  }\n\n  resetGame() {\n    this.setState({\n      cpuMoves: [],\n      userMoves: [],\n      activeColor: \"\",\n      round: 1,\n      gameStarted: false,\n      userTurn: false,\n    });\n  }\n\n  toggleStrict() {\n    this.setState({\n      strictMode: !this.state.strictMode,\n    });\n  }\n\n  playColorFX(color) {\n    this.animateColor(color);\n    this.playSound(color);\n  }\n  animateColor(color) {\n    new Promise((resolve, reject) => {\n      this.activateColor(color);\n      resolve();\n    }).then(() => {\n      setTimeout(() => {\n        this.deactivateColor();\n      }, 250);\n    });\n  }\n  activateColor(color) {\n    this.setState({\n      activeColor: color,\n    });\n  }\n  deactivateColor() {\n    this.setState({\n      activeColor: \"\",\n    });\n  }\n  playSound(color) {\n    const sounds = this.state.sounds;\n    sounds[color].pause(); //Stops sound in case of conseuctive same color\n    sounds[color].currentTime = 0; //Ensures sound plays from beginning\n    sounds[color].play();\n  }\n\n  isCorrect() {\n    const { userMoves, cpuMoves } = this.state;\n    const currentMoveIndex = userMoves.length - 1;\n    const userMove = userMoves[currentMoveIndex];\n    const cpuMove = cpuMoves[currentMoveIndex];\n    if (userMove === cpuMove) {\n      return true;\n    }\n\n    return false;\n  }\n  isFinalMove() {\n    if (this.state.userMoves.length === this.state.cpuMoves.length) {\n      return true;\n    }\n    return false;\n  }\n\n  getRandomColor() {\n    const randomColor = this.state.colors[Math.floor(Math.random() * 4)];\n    return randomColor;\n  }\n\n  getCurrentRound() {\n    if (this.state.round < 10) {\n      return `0${this.state.round}`;\n    }\n    return this.state.round;\n  }\n\n  render() {\n    const { gameStarted, activeColor, userTurn, strictMode } = this.state;\n    return (\n      <React.Fragment>\n        <h1>Circles Memory Game</h1>\n        <ButtonsContainer\n          toggleStrict={this.toggleStrict}\n          gameStarted={gameStarted}\n          strictMode={strictMode}\n          resetGame={this.resetGame}\n          startGame={this.startGame}\n          userTurn={userTurn}\n        />\n        <CirclesContainer\n          verifyMove={this.verifyMove}\n          activeColor={activeColor}\n          userTurn={userTurn}\n          round={this.getCurrentRound()}\n          gameStarted={gameStarted}\n          recordMove={this.recordMove}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}